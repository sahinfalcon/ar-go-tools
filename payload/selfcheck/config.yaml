options:
  log-level: 3
  project-root: "../../"
  reports-dir: "payload/selfcheck/all-report"
  report-paths: true
  analysis-options:
    max-alarms: 10
    unsafe-max-depth: 6
    max-entrypoint-context-size: 2

targets:
  - name: "argot"
    files:
      - "cmd/argot/main.go"
  - name: "racerg"
    files:
      - "cmd/racerg/main.go"

# Define the analysis problems
dataflow-problems:
  summarize-on-demand: true
  user-specs:
    - "payload/selfcheck/argot-specs.json"
    - "payload/selfcheck/std-specs.json"
  field-sensitive-funcs:
    - "AnalyzerState"
  taint-tracking:
    # Tracking the data that flows from the client code being analyzed to location where we might log strings from
    # that code. For example, if a (*ssa.Function).String() is logged in a log.Warnf call.
    # Data should be Sanitized using the formatutil.Santitize function.
    - tag: "source-formats"
      targets: [ "argot" ]
      severity: "LOW"
      sources:
        - package: "ssa"
          method: "String" # any String method from the ssa package, includes function.String etc.
          context: "ar-go-tools" # Only sources in our code, i.e. in ar-go-tools
      sinks:
        - context: "ar-go-tools"
          package: "fmt"
          value-match: ".*%s.*" # we only care about string formats. %q is fine to use
          method: "((Printf)|(Fprintf))"
        - package: "config"
          value-match: ".*%s.*" # we only care about string formats. %q is fine to use
          method: "((Warnf)|(Debugf)|(Infof)|(Errorf))" # the logging functions in our implementation
      sanitizers:
        - package: "formatutil"
          method: "Sanitize"
      filters:
        - type: "LogGroup" # log group cannot be really tainted by the data, but taint tracking will mark it
        # because formatters are deemed tainted by their arguments. This is a very restrictive assumption.
        - type: "io.Writer"
        - type: "^int$" # not enough data in an int to do terminal injection
        - type: "^bool$" # same for bool
        - type: "^float" # same for floats
  slicing:
    # Trace the source of the arguments of MustCompile; all data flowing to the arguments of MustCompile
    # must come from constants.
    # Run me with: argot backtrace -config path-to-this-file
    # The tool does not automatically check the origin but only traces the sources; for now, the property
    # can be checked by verifying (manually) that every trace originates from constants. There are very
    # few traces in this example.
    - tag: "compile-static-regex"
      description: "Checking that MustCompile is used only with static strings."
      targets: [ "argot", "racerg" ]
      severity: "HIGH"
      must-be-static: true
      backtracepoints:
        - package: "^regexp$"
          method: "^MustCompile$"

syntactic-problems:
  struct-inits:
    - tag: "df-intra-uses" # search for //argot:ignore df-intra-uses to see where there are different allocations
      description: "When using RunIntraProceduralPass, initialize with dataflow.IsNodeOfInterest unless you know better."
      targets: ["argot"]
      struct:
        type: "github.com/awslabs/ar-go-tools/analysis.IntraAnalysisParams"
      fields-set:
        - field: "ShouldTrack"
          value:
            package: "github.com/awslabs/ar-go-tools/analysis/dataflow"
            method: "IsNodeOfInterest"